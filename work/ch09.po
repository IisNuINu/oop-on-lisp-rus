#. extracted from ./en/ch09.md
# bear <NuINu>, 2022.
msgid ""
msgstr ""
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-24 17:39+0300\n"
"PO-Revision-Date: 2022-10-08 11:20+0300\n"
"Last-Translator: bear <NuINu>\n"
"Language-Team: English <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Lokalize 21.12.1\n"
"Language: en_US\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ./en/ch09.md:2
msgid "# Creating and Initializing Instances "
msgstr "# Создание и инициализация экземпляров"

#: ./en/ch09.md:4
msgid ""
"Client programs usually use constructors to make instances. Constructors "
"call make-instance, which creates, initializes, and returns a new instance. "
"CLOS enables you to control many aspects of the initialization, ranging from "
"supplying a default value for a slot to customizing the initialization by "
"writing a method. This chapter begins by describing the arguments to make-"
"instance and summarizing the steps CLOS performs when make-instance is "
"called. It then shows how to use the techniques for controlling "
"initialization."
msgstr ""
"Клиентские программы обычно используют конструкторы для создания экземпляров."
" Конструкторы вызывают make-instance, который создает, инициализирует и"
" возвращает новый экземпляр. CLOS позволяет вам управлять многими аспектами"
" инициализации, начиная от указания значения по умолчанию для слота и"
" заканчивая настройкой инициализации путем написания метода. Эта глава"
" начинается с описания аргументов make-instance и краткого описания шагов,"
" которые CLOS выполняет при вызове make-instance. Затем в нем показано, как"
" использовать методы для управления инициализацией."

#: ./en/ch09.md:6
msgid "## 9.1 ARGUMENTS TO MAKE-INSTANCE"
msgstr "## 9.1 АРГУМЕНТЫ ДЛЯ СОЗДАНИЯ ЭКЗЕМПЛЯРА"

#: ./en/ch09.md:8
msgid "The syntax of make-instance is "
msgstr "Синтаксис make-instance таков"

#: ./en/ch09.md:12
msgid ""
"<pre>\n"
"make-instance class Srest initargs \n"
"</pre>"
msgstr ""

#: ./en/ch09.md:14
msgid ""
"The first argument is the class, which can be either the name of the class "
"or the class object itself. This gives you a clue that make-instance "
"straddles the fence between the macro level and the functional level. In "
"fact, make-instance is a powerful tool used by both applications programmers "
"and metaobject programmers; we describe only those techniques intended for "
"applications programmers."
msgstr ""
"Первый аргумент - это класс, который может быть либо именем класса, либо"
" самим объектом класса. Это дает вам представление о том, что make-instance"
" пересекает границу между макроуровнем и функциональным уровнем. Фактически,"
" make-instance - это мощный инструмент, используемый как программистами"
" приложений, так и программистами метаобъектов; мы описываем только те"
" методы, которые предназначены для прикладных программистов."

#: ./en/ch09.md:16
msgid ""
"The &rest argument consists of initargs, which is short for initialization "
"arguments. An initarg controls some aspect of initialization; it might fill "
"a slot, or be used by an initialization method, or both."
msgstr ""
"Аргумент &rest состоит из initargs, что является сокращением от аргументов"
" инициализации. initarg управляет некоторым аспектом инициализации; он может"
" заполнять слот или использоваться методом инициализации, или и тем, и другим."

#: ./en/ch09.md:18
msgid ""
"Each initarg consists of an initarg name followed by a value. An initarg "
"name can be any symbol, not necessarily a keyword. The format of the srest "
"argument is the same as the format of keyword arguments that are processed "
"as skey parameters."
msgstr ""
"Каждый initarg состоит из имени инициализирующего параметра, за которым"
" следует значение. Имя инициализации initarg может быть любым символом, не"
" обязательно ключевым словом. Формат аргумента &rest совпадает с форматом"
" аргументов ключевого слова, которые обрабатываются как параметры &key."

#: ./en/ch09.md:20
msgid "## 9.2 SUMMARY OF WHAT MAKE-INSTANCE DOES"
msgstr "## 9.2 КРАТКОЕ ОПИСАНИЕ ТОГО, ЧТО ДЕЛАЕТ MAKE-INSTANCE"

#: ./en/ch09.md:22
msgid "When you call make-instance, CLOS performs the following steps: "
msgstr "Когда вы вызываете make-instance, CLOS выполняет следующие действия:"

#: ./en/ch09.md:27
msgid ""
"1.     Combines the initargs you supply to make-instance with the default "
"values for any initargs you do not explicitly supply. The result is a "
"defaulted initarg list. \n"
"2.     Ensures that all initarg names in the defaulted initarg list are "
"valid, and signals an error if they are not. If :allow-other-keys is "
"provided as true in the call to make-instance, all initarg names are valid. "
"\n"
"3.     Allocates storage for the instance and creates an instance whose "
"slots are all unbound. \n"
"4.     Applies the initialize-instance generic function to the newly created "
"instance and the defaulted initarg list. The default primary method for "
"initialize-instance does the following: "
msgstr ""
"1. Объединяет initargs, которые вы предоставляете make-instance, со"
" значениями по умолчанию для любых initargs(инициализаций), которые вы явно"
" не предоставляете. Результатом является список инициализации по умолчанию.\n"
"2. Гарантирует, что все имена initarg в списке инициализации(initarg) по"
" умолчанию являются допустимыми, и выдает сообщение об ошибке, если это не"
" так. Если :allow-other-keys указано как true при вызове make-instance, все"
" имена initarg являются допустимыми.\n"
"3. Выделяет хранилище для экземпляра и создает экземпляр, все слоты которого"
" не связаны.\n"
"4. Применяет обобщенную функцию initialize-instance к вновь созданному"
" экземпляру и списку инициализации(initarg) по умолчанию. Основной метод по"
" умолчанию для initialize-instance выполняет следующее:"

#: ./en/ch09.md:29
msgid "       a. Initializes slots according to the defaulted initarg list "
msgstr ""
"             a. Инициализирует слоты в соответствии со списком"
" инициализации(initarg) по умолчанию"

#: ./en/ch09.md:31
msgid ""
"       b. Initializes any slots that have :initforms and are still unbound "
msgstr ""
"             b. Инициализирует все слоты, которые имеют :initforms и все еще"
" не связаны"

#: ./en/ch09.md:33
msgid ""
"The primary method for initialize-instance does this work by calling shared-"
"initialize, which we discuss in \"A Procedural Definition: Initialization,\" "
"page 165. "
msgstr ""
"Основной метод для initialize-instance выполняет эту работу, вызывая"
" shared-initialize, который мы обсуждаем в \"Процедурном определении:"
" инициализация\", стр. 165."

#: ./en/ch09.md:35
msgid "5.     Returns the initialized instance. "
msgstr "5. Возвращает инициализированный экземпляр."

#: ./en/ch09.md:37
msgid "## 9.3 CONTROLLING INITIALIZATION WITH DEFCLASS OPTIONS"
msgstr "## 9.3 УПРАВЛЕНИЕ ИНИЦИАЛИЗАЦИЕЙ С ПОМОЩЬЮ ПАРАМЕТРОВ DEFCLASS"

#: ./en/ch09.md:39
msgid ""
"In this example, we define some classes to represent windows. These class "
"definitions use techniques for initializing windows. The basic class window "
"is intended to be the foundation of all windows. The defclass form uses two "
"slot options that pertain to initialization—the :initarg and :initform "
"options."
msgstr ""
"В этом примере мы определяем некоторые классы для представления"
" окон(windows). В этих определениях классов используются методы инициализации"
" windows. Окно базового класса предназначено для того, чтобы быть основой"
" всех окон. Форма defclass использует два параметра слота, которые относятся"
" к инициализации — параметры :initarg и :initform."

#: ./en/ch09.md:49
msgid ""
"<pre>\n"
"(defclass window () \n"
"  ((x         :initarg :x-position :accessor x-position) \n"
"   (y         :initarg :y-position :accessor y-position) \n"
"   (height    :initarg :height     :accessor window-height) \n"
"   (width     :initarg :width      :accessor window-width) \n"
"   (exposed-p :initform nil        :accessor exposed-p)) \n"
"  (:documentation \"Foundation of all windows.\")) \n"
"</pre>"
msgstr ""

#: ./en/ch09.md:51
msgid "### Using the :initarg slot option "
msgstr "### Использование опции слота :initarg"

#: ./en/ch09.md:53
msgid ""
"In the window class definition, four slots (x, y, height, and width) use the "
":initarg option. This declares four symbols as valid initarg names for the "
"class window. For example, the symbol : x-position is an initarg name. If "
"you give it to make-instance followed by a value, that value will be stored "
"in the x slot. Similarly, the symbol :height is an initarg that can be used "
"to initialize the slot named height."
msgstr ""
"В определении класса window для четырех слотов (x, y, height и width)"
" используется параметр :initarg. Он объявляет четыре символа допустимыми"
" именами инициализации для окна класса. Например, символ : x-position - это"
" имя инициализации. Если вы передадите его make-instance, за которым"
" последует значение, это значение будет сохранено в слоте x. Аналогично,"
" символ :height - это инициализация, которую можно использовать для"
" инициализации слота с именем height."

#: ./en/ch09.md:60
msgid ""
"<pre>\n"
"(make-instance 'window :x-position 0 \n"
"                       :y-position 0 \n"
"                       :height 200 \n"
"                       :width 75) \n"
"</pre>"
msgstr ""

#: ./en/ch09.md:62
msgid ""
"Note that the slot named exposed-p does not use the : initarg option. Thus, "
"you cannot initialize that slot by giving an argument to make-instance. The "
"exposed-p slot is not intended to be initialized by the user."
msgstr ""
"Обратите внимание, что слот с именем exposed-p не использует параметр"
" :initarg. Таким образом, вы не можете инициализировать этот слот,"
" предоставив аргумент make-instance. Слот exposed-p не предназначен для"
" инициализации пользователем."

#: ./en/ch09.md:64
msgid "### Using the rinitform slot option"
msgstr "### Использование опции слота :initform"

#: ./en/ch09.md:66
msgid ""
"The slot named exposed-p uses the :initform slot option to associate a "
"default initial value with the slot. The value is nil. The semantics of this "
"slot are simple: When you first create a window, it is not exposed. We "
"intentionally do not offer an initarg, because we want all newly created "
"windows to be deexposed; this approach causes the slot to be initialized "
"automatically to its initform (which is nil) and effectively prevents users "
"from initializing the exposed-p slot. "
msgstr ""
"Слот с именем exposed-p использует параметр слота :initform, чтобы связать"
" начальное значение по умолчанию со слотом. Значение равно nil. Семантика"
" этого слота проста: когда вы впервые создаете окно, оно не отображается. Мы"
" намеренно не предлагаем initarg, потому что мы хотим, чтобы все вновь"
" созданные окна были деэкспонированы(скрыты); такой подход приводит к"
" автоматической инициализации слота в его начальной форме(initform) (которая"
" равна нулю) и эффективно предотвращает инициализацию пользователями слота"
" exposed-p."

#: ./en/ch09.md:68
msgid "### Using the :default-initargs class option"
msgstr "### Использование параметра класса :default-initargs"

#: ./en/ch09.md:70
msgid ""
"Sometimes, it is useful for a class to provide a default value for an "
"initarg. The :default-initargs class option does this. It is used mostly for "
"remote defaulting; that is, for providing a default value for an inherited "
"initarg."
msgstr ""
"Иногда классу полезно предоставить значение по умолчанию для инициализации."
" Параметр класса :default-initargs делает это. Он используется в основном для"
" удаленного выполнения по умолчанию; то есть для предоставления значения по"
" умолчанию для унаследованного initarg."

#: ./en/ch09.md:72
msgid ""
"If an initarg is provided in the call to make-instance, it overrides the "
"default initarg. But if an initarg is omitted, the value of the the default "
"initarg is used."
msgstr ""
"Если initarg(инициализация) предоставляется в вызове make-instance, она"
" переопределяет инициализацию по умолчанию(default initarg). Но если"
" initarg(инициализация) опущена, используется значение инициализации по"
" умолчанию(default initarg)."

#: ./en/ch09.md:74
msgid ""
"We shall use idefault-initargs when defining a class that is commonly used "
"in the window program. A full-screen window is a window that covers the "
"entire screen. The height and width of such a window are obtained from "
"variables that store the screen's dimensions. A full screen window is "
"normally positioned at the origin, so we also give defaults for :x-position "
"and :y-position."
msgstr ""
"Мы будем использовать :default-initargs при определении класса, который"
" обычно используется в оконной программе. Полноэкранное окно(full-screen) -"
" это окно, которое занимает весь экран. Высота и ширина такого окна"
" получаются из переменных, которые хранят размеры экрана. Полноэкранное окно"
" обычно располагается в начале координат, поэтому мы также задаем значения по"
" умолчанию для :x-position и :y-position."

#: ./en/ch09.md:83
msgid ""
"<pre>\n"
"(defclass full-screen-window (window) () \n"
"  (idefault-initargs \n"
"   :x-position *screen-origin-x* \n"
"   :y-position *screen-origin-y* \n"
"   :height     *screen-height* \n"
"   :width      *screen-width*)) \n"
"</pre>"
msgstr ""

#: ./en/ch09.md:85
msgid ""
"This class can be used alone or as a building block for other classes. It "
"has the same slots as does window, but it offers defaults for four initargs "
"as a convenience for clients that need to make full-screen windows."
msgstr ""
"Этот класс может использоваться отдельно или в качестве строительного блока"
" для других классов. Он имеет те же слоты, что и window, но предлагает"
" значения по умолчанию для четырех инициализаций для удобства клиентов,"
" которым необходимо создавать полноэкранные окна."

#: ./en/ch09.md:87
msgid "### Two Kinds of Defaults"
msgstr "### Два вида значений по умолчанию"

#: ./en/ch09.md:89
msgid ""
"It is important to keep in mind the difference between :default-initargs and "
"linitform. The :default-initargs option gives a default value to an initarg, "
"and the linitform option gives a default value to a slot. "
msgstr ""
"Важно иметь в виду разницу между :default-initargs и :initform. Параметр"
" :default-initargs задает значение по умолчанию для initarg(инициализации), а"
" параметр :initform задает значение по умолчанию для слота."

#: ./en/ch09.md:91
msgid "If you intend to allow users to initialize a slot, then you should"
msgstr ""
"Если вы намерены разрешить пользователям инициализировать слот, то вам следует"

#: ./en/ch09.md:94
msgid ""
"*  Use :initarg to declare a symbol for initializing the slot \n"
"*  Use :default-initargs, if you want to give that initarg a default value "
msgstr ""
"* Использовать :initarg для объявления символа для инициализации слота\n"
"* Использовать :default-initargs, если вы хотите присвоить этому initarg"
" значение по умолчанию"

#: ./en/ch09.md:96
msgid ""
"If you do not intend to allow users to initialize a slot, then you should"
msgstr ""
"Если вы не собираетесь разрешать пользователям инициализировать слот, то вам"
" следует"

#: ./en/ch09.md:99
msgid ""
"*   Not use the :initarg option \n"
"*   Use :initform, if you want to give the slot a default initial value"
msgstr ""
"* Не использовать параметр :initarg\n"
"* Используйте :initform, если вы хотите присвоить слоту начальное значение по"
" умолчанию"

#: ./en/ch09.md:101
msgid ""
"These two options come into conflict if they are used together. Consider "
"what happens when a slot has a default value via :initform and an initarg "
"via :initarg, which itself has a default value via :default-initargs. The "
"default given in the idefault-initargs effectively overrides the default "
"given by :initform."
msgstr ""
"Эти два варианта вступают в конфликт, если они используются вместе."
" Рассмотрим, что происходит, когда слот имеет значение по умолчанию через"
" :initform и инициализацию через :initarg, которая сама имеет значение по"
" умолчанию через :default-initargs. Значение по умолчанию, заданное в"
" :default-initargs, эффективно переопределяет значение по умолчанию, заданное"
" в :initform."

#: ./en/ch09.md:103
msgid ""
"For both of these options, the default value form is evaluated every time it "
"is used. The value of an : in it form is evaluated each time it is used to "
"initialize a slot. The value of an initarg in idefault-initargs is evaluated "
"each time make-instance is called and that initarg is not given as an "
"argument to make-instance."
msgstr ""
"Для обоих этих параметров форма значения по умолчанию вычисляется каждый раз,"
" когда она используется. Значение :initform вычисляется каждый раз, когда оно"
" используется для инициализации слота. Значение initarg в :default-initargs"
" вычисляется при каждом вызове make-instance, и этот initarg не передается в"
" качестве аргумента make-instance."

#: ./en/ch09.md:105
msgid "## 9.4 CONTROLLING INITIALIZATION WITH METHODS"
msgstr "## 9.4 УПРАВЛЕНИЕ ИНИЦИАЛИЗАЦИЕЙ С ПОМОЩЬЮ МЕТОДОВ"

#: ./en/ch09.md:107
msgid ""
"When make-instance is called, it creates an instance and calls the "
"initialize-instance generic function to initialize the new instance. CLOS "
"supplies a default primary method for initialize-instance, which fills the "
"slots with values according to their initargs and initforms. You can "
"customize the initialization of instances by writing a method for initialize-"
"instance to do additional work."
msgstr ""
"Когда вызывается make-instance, он создает экземпляр и вызывает обобщенную"
" функцию initialize-instance для инициализации нового экземпляра. CLOS"
" предоставляет основной метод по умолчанию для initialize-instance, который"
" заполняет слоты значениями в соответствии с их initargs и initforms. Вы"
" можете настроить инициализацию экземпляров, написав метод для"
" initialize-instance для выполнения дополнительной работы."

#: ./en/ch09.md:109
msgid "### Defining After-Methods for initialize-instance"
msgstr ""
"### Определение After(после)-методов для initialize-instance(инициализации"
" экземпляра)"

#: ./en/ch09.md:111
msgid ""
"A window system probably needs to keep track of all windows. Here we add the "
"new window to the data structure that keeps track of the deexposed windows."
msgstr ""
"Оконная система, вероятно, должна отслеживать все окна. Здесь мы добавляем"
" новое окно в структуру данных, которая отслеживает"
" деэкспонированные(deexposed/скрытые) окна."

#: ./en/ch09.md:116
msgid ""
"<pre>\n"
"(defmethod initialize-instance :after ((w window) Skey) \n"
"   (push w *deexposed-windows*)) \n"
"</pre>"
msgstr ""

#: ./en/ch09.md:118
msgid ""
"Usually you should define after-methods for initialize-instance (as we do "
"here) instead of primary methods. A primary method would override the "
"default primary method and prevent the usual slot initialization from "
"occurring."
msgstr ""
"Обычно вы должны определять after-methods для initialize-instance (как мы"
" делаем здесь) вместо primary methods. Основной метод переопределил бы"
" основной метод по умолчанию и предотвратил бы обычную инициализацию слота."

#: ./en/ch09.md:120
msgid ""
"Since methods for initialize-instance receive all the defaulted initargs as "
"arguments, methods for initialize-instance should use skey in their lambda-"
"lists. The result of using skey here is that the method allows keywords "
"without specifying that it uses any keyword arguments. For more details on "
"method lambda-lists, see \"Congruent Lambda-Lists,\" page 132. "
msgstr ""
"Поскольку методы для initialize-instance получают все значения initargs по"
" умолчанию в качестве аргументов, методы для initialize-instance должны"
" использовать &key в своих лямбда-списках. Результатом использования &key"
" здесь является то, что метод допускает ключевые слова без указания того, что"
" он использует какие-либо аргументы ключевого слова. Для получения более"
" подробной информации о лямбда-списках метода см. \"Конгруэнтные"
" лямбда-списки\", стр. 132."

#: ./en/ch09.md:122
msgid "### The Default Method for initialize-instance"
msgstr ""
"### Метод по умолчанию для initialize-instance(инициализации экземпляра)"

#: ./en/ch09.md:124
msgid ""
"make-instance calls initialize-instance with the instance and the defaulted "
"initarg list. With these arguments, the default method for initialize-"
"instance fills the slots with values, as follows:"
msgstr ""
"make-instance вызывает initialize-instance с экземпляром и списком"
" инициализации по умолчанию(defaulted initarg). С этими аргументами метод по"
" умолчанию для initialize-instance заполняет ячейки значениями следующим"
" образом:"

#: ./en/ch09.md:129
msgid ""
"\t      > Step 1    If you provide a slot-filling initarg to make-instance, "
"then its value is stored in the associated slot. (A slot-filling initarg is "
"specified by the :initarg slot option.) \n"
"\t      > Step 2    If the slot is not filled by Step 1, and the initarg has "
"a default value form, then that form is evaluated and the result is stored "
"in the slot. (A default for an initarg is specified by the :default-initargs "
"class option.) \n"
"\t      > Step 3    If the slot is not filled by Step 2, and the slot has a "
"default initial value form, then that form is evaluated and the result is "
"stored in the slot. (A default for a slot is specified by the :initform slot "
"option.) \n"
"\t      > Step 4    If the slot is not filled by Step 3, then the slot "
"remains unbound."
msgstr ""
"\t      > Шаг 1 Если вы предоставляете заполняющий слот initarg для"
" make-instance, то его значение \n"
"\t      >           сохраняется в соответствующем слоте. (Параметр initarg,"
" заполняющий слот, задается\n "
"\t      >           параметром слота :initarg.)\n"
"\t      > Шаг 2 Если слот не заполнен на шаге 1, и у initarg есть форма"
" значения по умолчанию, то эта форма\n "
"\t      >          вычисляется, и результат сохраняется в слоте. (Значение по"
" умолчанию для initarg задается\n"
"\t      >          параметром класса :default-initargs.)\n"
"\t      > Шаг 3 Если слот не заполнен на шаге 2, и слот имеет форму"
" начального значения по умолчанию, то \n"
"\t      >          эта форма вычисляется, и результат сохраняется в слоте."
" (Значение по умолчанию для слота\n"
"\t      >          задается параметром слота :initform.)\n"
"\t      > Шаг 4 Если слот не заполнен на шаге 3, то слот остается несвязанным."

#: ./en/ch09.md:131
msgid ""
"The default method for initialize-instance does this initialization work by "
"calling shared-initialize, a generic function that is called in other "
"contexts as well as in creating new instances. We describe shared-initialize "
"in detail in \"Isolating Work Shared Among Procedures,\" page 167."
msgstr ""
"Метод по умолчанию для initialize-instance выполняет эту инициализацию путем"
" вызова shared-initialize, обобщенной функции, которая вызывается в других"
" контекстах, а также при создании новых экземпляров. Мы подробно описываем"
" общую инициализацию в разделе \"Изоляция работы, разделяемой между"
" процедурами\", стр. 167."

#: ./en/ch09.md:133
msgid "## 9.5 INITIALIZATION ARGUMENTS"
msgstr "## 9.5 АРГУМЕНТЫ ИНИЦИАЛИЗАЦИИ"

#: ./en/ch09.md:135
msgid ""
"This section describes initargs in more detail, focusing on how they are "
"used to initialize new instances. Initargs are used in other contexts as "
"well; see \"Performing Initialization by Initargs,\" page 168. "
msgstr ""
"В этом разделе более подробно описываются инициализации, уделяя особое"
" внимание тому, как они используются для инициализации новых экземпляров."
" Инициализации используются и в других контекстах; см. \"Выполнение"
" инициализации с помощью Initargs\", стр. 168."

#: ./en/ch09.md:137
msgid "### Validity of Initarg Names"
msgstr "### Действительность имен Initarg"

#: ./en/ch09.md:139
msgid ""
"An initarg name must be declared as valid for a given class before it is "
"used in a call to make-instance. There are two ways to declare that an "
"initarg name is valid: "
msgstr ""
"Имя initarg должно быть объявлено как допустимое для данного класса, прежде"
" чем оно будет использовано в вызове make-instance. Существует два способа"
" объявить, что имя initarg является допустимым:"

#: ./en/ch09.md:147
msgid ""
"       > :initarg slot option \n"
"       >           Declares a symbol as a valid initarg name and specifies \n"
"       >           that the value of the initarg should be stored in the "
"slot. \n"
"       >           Such a symbol is called a slot-filling initarg. The \n"
"       >           :initarg slot option is inherited by union: all initarg \n"
"       >           names declared by the class or any of its superclasses \n"
"       >           are valid for the class. "
msgstr ""
"\t     > :initarg slot option \n"
"\t     >            Объявляет символ как допустимое имя"
" initarg(инициализации) и указывает, что значение initarg\n"
"\t     >            должно быть сохранено в слоте.\n"
"\t     >            Такой символ называется заполняющим слот initarg."
" Параметр слота :initarg наследуется\n"
"\t     >            объединением: все имена initarg, объявленные классом или"
" любым из его суперклассов,\n"
"\t     >            действительны для класса."

#: ./en/ch09.md:154
msgid ""
"       > initialize-instance methods \n"
"       >           Declare all skey parameter names in the lambda-list as \n"
"       >           valid initarg names for the class. (Methods for other \n"
"       >           generic functions also declare skey parameters as valid \n"
"       >           initarg names. See \"Declaring Initarg Names as Valid,\" "
"\n"
"       >           page 170.) "
msgstr ""
"\t       > initialize-instance methods \n"
"\t       >            Объявляет все имена параметров &key в лямбда-списке как"
" допустимые имена инициализации\n"
"\t       >            для класса. (Методы для других обобщенных функций также"
" объявляют параметры &key как\n"
"\t       >            допустимые имена initarg. Смотрите \"Объявление имен"
" Initarg как допустимых\", стр. 170.)"

#: ./en/ch09.md:156
msgid ""
"In addition, the initarg name :allow-other-keys is valid for all classes.  "
"Its default value is nil, which means that CLOS checks the validity of all "
"initargs and signals an error if an invalid initarg name is detected. If you "
"call make-instance and give :allow-other-keys followed by a non-nil value, "
"this error checking is disabled."
msgstr ""
"Кроме того, имя инициализации :allow-other-keys допустимо для всех классов."
" Его значение по умолчанию равно nil, что означает, что CLOS проверяет"
" действительность всех инициализаций и выдает сообщение об ошибке, если"
" обнаружено недопустимое имя инициализации. Если вы вызываете make-instance и"
" даете :allow-other-keys, за которым следует значение, отличное от нуля, эта"
" проверка ошибок отключена."

#: ./en/ch09.md:158
msgid ""
"If the lambda-list of an initialization method uses sallow-other-keys, all "
"possible symbols are declared as valid initargs. In other words, Sallow-"
"other-keys in an initialization method disables the error checking of "
"initarg names."
msgstr ""
"Если лямбда-список метода инициализации использует :allow-other-keys, все"
" возможные символы объявляются как допустимые инициализации. Другими словами,"
" использование :allow-other-keys в методе инициализации отключает проверку"
" имен initarg на ошибки."

#: ./en/ch09.md:160
msgid "### Inheritance of Default Initargs "
msgstr "### Наследование Initargs(инициализаций) по умолчанию"

#: ./en/ch09.md:162
msgid ""
"The :default-initargs class option associates a default value with an "
"initarg. The set of default initargs is inherited by union, but the default "
"value of any one initarg is inherited by shadowing. In other words,"
msgstr ""
"Параметр класса :default-initargs связывает значение по умолчанию с initarg."
" Набор initargs(инициализаций) по умолчанию наследуется объединением, но"
" значение по умолчанию любого одного параметра initarg наследуется"
" затенением. Другими словами,"

#: ./en/ch09.md:165
msgid ""
"       > Union           The set of default initargs of a class is the union "
"of all default initargs\n"
"       >                 provided by the classes in its class precedence list"
msgstr ""
"\t     > Union(Объединение)         Набор initargs класса по умолчанию - это"
" объединение всех\n"
"\t     >                                         initargs(инициализаций) по"
" умолчанию, предоставляемых классами в его\n"
"\t     >                                         списке предшествования"
" классов"

#: ./en/ch09.md:168
msgid ""
"       > Shadowing       The default value for any one initarg comes from "
"the most specific class that\n"
"       >                 provided a default value for it "
msgstr ""
"\t       > Shadowing(Затенение)            значения по умолчанию для любого"
" одного initarg происходит от\n"
"\t       >                                               наиболее конкретного"
" класса, который предоставил для него значение по\n"
"\t       >                                               умолчанию"

#: ./en/ch09.md:170
msgid "### Separation of Initarg and Slot Names"
msgstr "### Разделение Initarg(инициализаций) и имен слотов"

#: ./en/ch09.md:172
msgid ""
"When you use the : initarg slot option, the name of the initarg is "
"independent of the name of the slot. This independence allows for a level of "
"abstraction; clients cannot assume that an initarg maps directly into a slot "
"of the same name. In fact, some initargs might not map into a slot at all, "
"and some slots might be filled with values that are calculated on the basis "
"of several initargs."
msgstr ""
"Когда вы используете опцию слота :initarg, имя initarg(инициализации) не"
" зависит от имени слота. Эта независимость обеспечивает определенный уровень"
" абстракции; клиенты не могут предполагать, что инициализация отображается"
" непосредственно в слот с тем же именем. Фактически, некоторые"
" initargs(инициализации) могут вообще не отображаться в слот, а некоторые"
" слоты могут быть заполнены значениями, которые вычисляются на основе"
" нескольких initargs(инициализаций)."

#: ./en/ch09.md:174
msgid ""
"For example, the triangle class might accept three initargs, one for the "
"length of each side. However, the class might be implemented to store the "
"length of two sides and the angle between them, which can be calculated from "
"the three initargs. Thus, invisibly to the client, the third side would be "
"used to calculate the opposing angle, and then would be discarded."
msgstr ""
"Например, класс triangle может принимать три initargs, по одной для длины"
" каждой стороны. Однако класс может быть реализован для хранения длины двух"
" сторон и угла между ними, который может быть вычислен из трех initargs."
" Таким образом, незаметно для клиента третья сторона использовалась бы для"
" расчета противоположного угла, а затем была бы отброшена."

#: ./en/ch09.md:176
msgid ""
"The following example uses this approach. Notice that the initialization "
"method declares :side-a, :side-b, and :side-c as valid initarg names, "
"whereas the defclass form does not declare any initarg names. We define the "
"constructor make-triangle to make an abstract interface for creating "
"triangles and to make all sides be required arguments. All the "
"initialization work is done in the method for initialize-instance."
msgstr ""
"В следующем примере используется этот подход. Обратите внимание, что метод"
" инициализации объявляет :side-a, :side-b и :side-c как допустимые имена"
" initarg(инициализации), тогда как форма defclass не объявляет никаких имен"
" initarg(инициализации). Мы определяем конструктор make-triangle, чтобы"
" создать абстрактный интерфейс для создания треугольников и сделать все"
" стороны обязательными аргументами. Вся работа по инициализации выполняется в"
" методе для initialize-instance."

#: ./en/ch09.md:182
msgid ""
"<pre>\n"
"(defclass triangle (shape) \n"
"  ((a : reader side-a) \n"
"   (b :reader side-b) \n"
"   (angle-C :reader angle-C)))"
msgstr ""

#: ./en/ch09.md:195
msgid ""
";;; Do all initialization in this method \n"
"(defmethod initialize-instance .after \n"
"    ((tri triangle) skey side-a side-b side-c) \n"
"   (let* ((float-a (coerce a 'float)) \n"
"          (float-b (coerce b 'float)) \n"
"          (float-c (coerce c 'float)) \n"
"          (float-angle-C (three-sides-to-angle \n"
"                          float-c float-a float-b))) \n"
"      (with-slots (a b angle-C) tri \n"
"         (setf a float-a) \n"
"         (setf b float-b) \n"
"         (setf angle-C float-angle-C)))) "
msgstr ""

#: ./en/ch09.md:202
msgid ""
";;; Define the constructor \n"
"(defun make-triangle (side-a side-b side-c) \n"
"   (make-instance 'triangle :side-a side-a \n"
"                            :side-b side-b \n"
"                            :side-c side-c)) \n"
"</pre>"
msgstr ""

#: ./en/ch09.md:204
msgid "##9.6 CONSTRUCTORS"
msgstr "##9.6 КОНСТРУКТОРЫ"

#: ./en/ch09.md:206
msgid ""
"We recommend using constructors as the external interface for creating "
"instances, because constructors add a valuable level of abstraction between "
"the client and the implementation. Consider triangles: The name of the "
"constructor, make-triangle, implies \"making a triangle,\" which is a higher-"
"level concept than is \"making an instance of the triangle class.\""
msgstr ""
"Мы рекомендуем использовать конструкторы в качестве внешнего интерфейса для"
" создания экземпляров, поскольку конструкторы добавляют ценный уровень"
" абстракции между клиентом и реализацией. Рассмотрим треугольники: название"
" конструктора, make-triangle, подразумевает \"создание треугольника\", что"
" является концепцией более высокого уровня, чем \"создание экземпляра класса"
" triangle\"."

#: ./en/ch09.md:208
msgid ""
"Another advantage of constructors is that they can use the full power of "
"Common Lisp argument-processing. The make-instance syntax is extremely "
"limited: Following the first argument (the class) is an srest parameter "
"consisting of initargs. In many cases, the semantics of a class can be "
"better expressed with required arguments, optional arguments, and so on. "
"With triangles, for example, the &rest argument to make-instance fails to "
"imply that all three initargs—the sides—are required to make a triangle. The "
"constructor, however, can make the three sides be required arguments; the "
"syntax of the constructor accurately reflects the semantics of triangles. "
msgstr ""
"Еще одним преимуществом конструкторов является то, что они могут использовать"
" всю мощь обработки аргументов Common Lisp. Синтаксис make-instance крайне"
" ограничен: после первого аргумента (класса) следует параметр &rest,"
" состоящий из initargs. Во многих случаях семантику класса можно лучше"
" выразить с помощью обязательных аргументов, необязательных аргументов и так"
" далее. Например, в случае с треугольниками аргумент &rest для make-instance"
" не подразумевает, что для создания треугольника требуются все три"
" initargs(инициализации) — стороны. Конструктор, однако, может сделать три"
" стороны обязательными аргументами; синтаксис конструктора точно отражает"
" семантику треугольников."

#: ./en/ch09.md:210
msgid ""
"Perhaps most important, constructors conceal the implementation of objects, "
"which frees you to change the implementation without disturbing client "
"programs. If you advertise constructors as the external interface, you can "
"later change to a defstruct representation of the object or change the name "
"or initargs of the class, without invalidating client programs. Constructors "
"can also select one of several classes, based on its arguments. If you "
"advertise make-instance as the external interface, you cannot make these "
"changes within the implementation. "
msgstr ""
"Возможно, самое важное, конструкторы скрывают реализацию объектов, что"
" позволяет вам изменять реализацию, не нарушая работу клиентских программ."
" Если вы рекламируете(предоставляете как внешний интерфейс) конструкторы как"
" внешний интерфейс, вы можете позже перейти к представлению объекта defstruct"
" или изменить имя или initargs(инициализации) класса, не делая"
" недействительными клиентские программы. Конструкторы также могут выбрать"
" один из нескольких классов на основе его аргументов. Если вы рекламируете"
" make-instance как внешний интерфейс, вы не сможете внести эти изменения в"
" рамках реализации."
