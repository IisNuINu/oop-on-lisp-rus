#. extracted from ./en/ch01.md
# bear <NuINu>, 2022.
msgid ""
msgstr ""
"Project-Id-Version: \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2022-09-24 17:39+0300\n"
"PO-Revision-Date: 2022-09-24 21:33+0300\n"
"Last-Translator: bear <NuINu>\n"
"Language-Team: English <kde-i18n-doc@kde.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Lokalize 21.12.1\n"
"Language: en_US\n"
"Plural-Forms: nplurals=2; plural=(n != 1);\n"

#: ./en/ch01.md:2
msgid "# Introduction to the CLOS Model"
msgstr "# Введение в модель CLOS"

#: ./en/ch01.md:4
msgid ""
"Many computer programs create \"objects\" and manipulate them. Some-times "
"these objects represent real-world things. A traffic-simulation program "
"needs to represent vehicles, pedestrians, intersections, and traffic lights. "
"In other cases, programs manipulate objects that represent abstractions, "
"such as the buffers, windows, and processes that are manipulated in "
"operating-systems engineering."
msgstr ""
"Многие компьютерные программы создают \"objects/объекты\" и манипулируют ими."
" Иногда эти объекты представляют собой реальные вещи. Программа моделирования"
" дорожного движения должна представлять транспортные средства, пешеходов,"
" перекрестки и светофоры. В других случаях программы манипулируют объектами,"
" представляющими абстракции, такими как буферы, окна и процессы, которыми"
" манипулируют при разработке операционных систем."

#: ./en/ch01.md:7
msgid ""
"The Common Lisp Object System (CLOS) supports the style of programming "
"called object-oriented programming, which makes it easy to create and "
"manipulate objects. CLOS encourages the software developer to create a "
"working model that describes the various classes of objects in terms of "
"their structure and behavior. Often, the working model in- \n"
"cludes classes that are related to one another; they are similar but not "
"identical. For example, window systems usually need to support different "
"kinds of windows for different purposes. One kind of window might have a "
"border; another might have a label; another might have both a border and a "
"label. The design of a window system would likely include several classes of "
"windows, CLOS makes it easy to represent relationships among classes, and it "
"supports a flexible means of inheriting (sharing) structure and behavior. "
"Inheritance allows the design and implementation of an application program "
"to be highly modular, and obviates the need for maintaining several bodies "
"of nearly identical code. "
msgstr ""
"Объектная система Common Lisp (CLOS) поддерживает стиль программирования,"
" называемый объектно-ориентированным программированием, который упрощает"
" создание объектов и манипулирование ими. CLOS призывает разработчика"
" программного обеспечения создать рабочую модель, которая описывает различные"
" классы объектов с точки зрения их структуры и поведения. Часто рабочая"
" модель включает классы, которые связаны друг с другом; они похожи, но не"
" идентичны. Например, оконные системы обычно должны поддерживать разные типы"
" окон для разных целей. У одного вида окна может быть граница; у другого"
" может быть метка; другой может иметь как границу, так и метку. Дизайн"
" оконной системы, вероятно, будет включать в себя несколько классов окон,"
" CLOS упрощает представление отношений между классами и поддерживает гибкие"
" средства наследования (совместного использования) структуры и поведения."
" Наследование позволяет проектировать и реализовывать прикладную программу с"
" высокой степенью модульности и устраняет необходимость в поддержании"
" нескольких кусков почти идентичного кода."

#: ./en/ch01.md:9
msgid ""
"CLOS promotes modularity in another important context, by separating the "
"implementation of a program from the interface. The clients of a CLOS "
"program (which are other Lisp programs) depend on only the interface, which "
"is a high-level description of operations that can be performed on a set of "
"objects. Clients use these operations to create and manipulate objects; they "
"do not depend on knowledge of the underlying implementation. This separation "
"frees the programmer to change or extend the implementation without "
"interfering with clients of the program."
msgstr ""
"CLOS способствует модульности в другом важном контексте, отделяя реализацию"
" программы от интерфейса. Клиенты программы CLOS (которые являются другими"
" программами Lisp) зависят только от интерфейса, который представляет собой"
" высокоуровневое описание операций, которые могут быть выполнены с набором"
" объектов. Клиенты используют эти операции для создания объектов и"
" манипулирования ими; они не зависят от знания базовой реализации. Это"
" разделение освобождает программиста от необходимости  вмешиваться в работу"
" клиентов программы, при изменении или расширении реализации."

#: ./en/ch01.md:11
msgid ""
"CLOS makes it easier to design, develop, maintain, and extend a complex "
"program. The benefits of the object-oriented style are most striking for "
"large, complex programs, but medium-sized programs can also realize benefits "
"from this style."
msgstr ""
"CLOS упрощает проектирование, разработку, обслуживание и расширение сложной"
" программы. Преимущества объектно-ориентированного стиля наиболее заметны для"
" больших и сложных программ, но программы среднего размера также могут"
" реализовать преимущества этого стиля."

#: ./en/ch01.md:13
msgid ""
"Any CLOS program could be written using the traditional style of Lisp "
"programming. An important advantage of using CLOS lies in the automatic "
"control of the interaction among the objects. Here, we summarize some of the "
"benefits of using CLOS:"
msgstr ""
"Любая программа CLOS может быть написана с использованием традиционного стиля"
" программирования на Лиспе. Важное преимущество использования CLOS"
" заключается в автоматическом управлении взаимодействием между объектами."
" Здесь мы обобщим некоторые преимущества использования CLOS:"

#: ./en/ch01.md:19
msgid ""
"* The program more closely resembles the world it is modeling. An object-"
"oriented program is designed at a higher level of abstraction than a "
"traditional Lisp program. The programmer is encouraged to focus on the "
"abstract properties of objects, rather than being distracted by the way the "
"objects are implemented. An object-oriented design allows for objects with "
"meaningful names, behavior, and interaction. \n"
"* Client programs benefit from a well-defined interface. Client programs can "
"use a CLOS program through a well-defined interface; clients are shielded "
"from the internal details (implementation) of the CLOS program. This means "
"that clients continue to work even if modifications are made to the "
"underlying implementation. Even more important, if the implementation is "
"extended (to support additional classes, for example), all clients "
"immediately and automatically take advantage of the extensions. \n"
"* The programmer benefits from a modular implementation. CLOS enables the "
"programmer to define an organization of classes that models the "
"relationships among the various kinds of objects. The programmer can define "
"classes that serve as building blocks; each individual aspect of structure "
"and behavior is abstracted and defined separately. The programmer then "
"creates new classes that inherit the desired combination of building blocks. "
"\n"
"* A CLOS program is conveniently extensible. Until now we have pictured the "
"CLOS program as being a complete program, in and of itself. Some CLOS "
"programs, however, are written with the goal of being extended and "
"customized by the users. Such a program offers a set of classes with "
"documented structure and behavior; these classes are intended to be used as "
"building blocks. Users can create new classes that inherit from those "
"building blocks and add customized behavior. \n"
"* CLOS defines conventions that are shared across the COMMON LISP community. "
"The benefits already mentioned are offered by other languages that support "
"the object-oriented paradigm. CLOS, however, has the additional advantage of "
"being a language standard. CLOS defines a standard set of conventions that "
"will be supported by a wide variety of Common Lisp implementations. Thus, "
"CLOS programs will be portable across different implementations."
msgstr ""
"* Программа более похожа на мир, который она моделирует."
" Объектно-ориентированная программа разрабатывается на более высоком уровне"
" абстракции, чем традиционная программа на Лиспе. Программисту рекомендуется"
" сосредоточиться на абстрактных свойствах объектов, а не отвлекаться на то,"
" как объекты реализованы. Объектно-ориентированная разработка позволяет"
" создавать объекты со значимыми именами, поведением и взаимодействием. \n"
"* Клиентские программы выигрывают от четко определенного интерфейса."
" Клиентские программы могут использовать программу CLOS через четко"
" определенный интерфейс; клиенты защищены от внутренних деталей (реализации)"
" программы CLOS. Это означает, что клиенты продолжают работать, даже если в"
" базовую реализацию вносятся изменения. Что еще более важно, если реализация"
" расширена (например, для поддержки дополнительных классов), все клиенты"
" немедленно и автоматически используют преимущества расширений. \n"
"* Программист извлекает выгоду из модульной реализации. CLOS позволяет"
" программисту определить организацию классов, которая моделирует отношения"
" между различными типами объектов. Программист может определять классы,"
" которые служат строительными блоками; каждый отдельный аспект структуры и"
" поведения абстрагируется и определяется отдельно. Затем программист создает"
" новые классы, которые наследуют желаемую комбинацию строительных блоков.\n"
"* Программа CLOS легко расширяется. До сих пор мы представляли программу CLOS"
" как целостную программу, саму по себе. Однако некоторые программы CLOS"
" написаны с целью расширения и настройки пользователями. Такая программа"
" предлагает набор классов с документированной структурой и поведением; эти"
" классы предназначены для использования в качестве строительных блоков."
" Пользователи могут создавать новые классы, которые наследуются от этих"
" строительных блоков, и добавлять настраиваемое поведение.\n"
"* CLOS определяет соглашения, которые являются общими для всего сообщества"
" COMMON LISP. Уже упомянутые преимущества предлагаются другими языками,"
" поддерживающими объектно-ориентированную парадигму. CLOS, однако, имеет"
" дополнительное преимущество в том, что является языковым стандартом. CLOS"
" определяет стандартный набор соглашений, которые будут поддерживаться"
" широким спектром реализаций Common Lisp. Таким образом, программы CLOS будут"
" переносимыми в разных реализациях.\n"

#: ./en/ch01.md:21
msgid ""
"CLOS itself does not enforce modularity or make it impossible to organize "
"programs poorly. Instead, it provides tools that can help you design modular "
"and extensible programs. The goal of this book is to help you learn how to "
"exploit these tools to good advantage. "
msgstr ""
"CLOS сам по себе не обеспечивает модульность и не делает невозможной плохую"
" организацию программ. Вместо этого он предоставляет инструменты, которые"
" могут помочь вам разрабатывать модульные и расширяемые программы. Цель этой"
" книги - помочь вам научиться использовать эти инструменты с пользой."
